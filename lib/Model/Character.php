<?php
/**
 * Character
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  Brave\NeucoreApi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Neucore API
 *
 * Client library of Neucore API
 *
 * The version of the OpenAPI document: 2.8.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.14.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Brave\NeucoreApi\Model;

use \ArrayAccess;
use \Brave\NeucoreApi\ObjectSerializer;

/**
 * Character Class Doc Comment
 *
 * @category Class
 * @package  Brave\NeucoreApi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class Character implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Character';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'valid_token' => 'bool',
        'valid_token_time' => '\DateTime',
        'token_last_checked' => '\DateTime',
        'id' => 'int',
        'name' => 'string',
        'main' => 'bool',
        'esi_tokens' => '\Brave\NeucoreApi\Model\EsiToken[]',
        'created' => '\DateTime',
        'last_update' => '\DateTime',
        'corporation' => '\Brave\NeucoreApi\Model\Corporation',
        'character_name_changes' => '\Brave\NeucoreApi\Model\CharacterNameChange[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'valid_token' => null,
        'valid_token_time' => 'date-time',
        'token_last_checked' => 'date-time',
        'id' => 'int64',
        'name' => null,
        'main' => null,
        'esi_tokens' => null,
        'created' => 'date-time',
        'last_update' => 'date-time',
        'corporation' => null,
        'character_name_changes' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'valid_token' => true,
        'valid_token_time' => true,
        'token_last_checked' => true,
        'id' => true,
        'name' => false,
        'main' => false,
        'esi_tokens' => false,
        'created' => true,
        'last_update' => true,
        'corporation' => false,
        'character_name_changes' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'valid_token' => 'validToken',
        'valid_token_time' => 'validTokenTime',
        'token_last_checked' => 'tokenLastChecked',
        'id' => 'id',
        'name' => 'name',
        'main' => 'main',
        'esi_tokens' => 'esiTokens',
        'created' => 'created',
        'last_update' => 'lastUpdate',
        'corporation' => 'corporation',
        'character_name_changes' => 'characterNameChanges'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'valid_token' => 'setValidToken',
        'valid_token_time' => 'setValidTokenTime',
        'token_last_checked' => 'setTokenLastChecked',
        'id' => 'setId',
        'name' => 'setName',
        'main' => 'setMain',
        'esi_tokens' => 'setEsiTokens',
        'created' => 'setCreated',
        'last_update' => 'setLastUpdate',
        'corporation' => 'setCorporation',
        'character_name_changes' => 'setCharacterNameChanges'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'valid_token' => 'getValidToken',
        'valid_token_time' => 'getValidTokenTime',
        'token_last_checked' => 'getTokenLastChecked',
        'id' => 'getId',
        'name' => 'getName',
        'main' => 'getMain',
        'esi_tokens' => 'getEsiTokens',
        'created' => 'getCreated',
        'last_update' => 'getLastUpdate',
        'corporation' => 'getCorporation',
        'character_name_changes' => 'getCharacterNameChanges'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('valid_token', $data ?? [], null);
        $this->setIfExists('valid_token_time', $data ?? [], null);
        $this->setIfExists('token_last_checked', $data ?? [], null);
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('main', $data ?? [], null);
        $this->setIfExists('esi_tokens', $data ?? [], null);
        $this->setIfExists('created', $data ?? [], null);
        $this->setIfExists('last_update', $data ?? [], null);
        $this->setIfExists('corporation', $data ?? [], null);
        $this->setIfExists('character_name_changes', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if ($this->container['name'] === null) {
            $invalidProperties[] = "'name' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets valid_token
     *
     * @return bool|null
     */
    public function getValidToken()
    {
        return $this->container['valid_token'];
    }

    /**
     * Sets valid_token
     *
     * @param bool|null $valid_token Shows if character's default refresh token is valid or not. This is null if there is no refresh token (EVE SSOv1 only) or a valid token but without scopes (SSOv2).
     *
     * @return self
     */
    public function setValidToken($valid_token)
    {
        if (is_null($valid_token)) {
            array_push($this->openAPINullablesSetToNull, 'valid_token');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('valid_token', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['valid_token'] = $valid_token;

        return $this;
    }

    /**
     * Gets valid_token_time
     *
     * @return \DateTime|null
     */
    public function getValidTokenTime()
    {
        return $this->container['valid_token_time'];
    }

    /**
     * Sets valid_token_time
     *
     * @param \DateTime|null $valid_token_time Date and time when the valid token property of the default token was last changed.
     *
     * @return self
     */
    public function setValidTokenTime($valid_token_time)
    {
        if (is_null($valid_token_time)) {
            array_push($this->openAPINullablesSetToNull, 'valid_token_time');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('valid_token_time', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['valid_token_time'] = $valid_token_time;

        return $this;
    }

    /**
     * Gets token_last_checked
     *
     * @return \DateTime|null
     */
    public function getTokenLastChecked()
    {
        return $this->container['token_last_checked'];
    }

    /**
     * Sets token_last_checked
     *
     * @param \DateTime|null $token_last_checked Date and time when the default token was last checked.
     *
     * @return self
     */
    public function setTokenLastChecked($token_last_checked)
    {
        if (is_null($token_last_checked)) {
            array_push($this->openAPINullablesSetToNull, 'token_last_checked');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('token_last_checked', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['token_last_checked'] = $token_last_checked;

        return $this;
    }

    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id EVE character ID.
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            array_push($this->openAPINullablesSetToNull, 'id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name EVE character name.
     *
     * @return self
     */
    public function setName($name)
    {
        if (is_null($name)) {
            throw new \InvalidArgumentException('non-nullable name cannot be null');
        }
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets main
     *
     * @return bool|null
     */
    public function getMain()
    {
        return $this->container['main'];
    }

    /**
     * Sets main
     *
     * @param bool|null $main main
     *
     * @return self
     */
    public function setMain($main)
    {
        if (is_null($main)) {
            throw new \InvalidArgumentException('non-nullable main cannot be null');
        }
        $this->container['main'] = $main;

        return $this;
    }

    /**
     * Gets esi_tokens
     *
     * @return \Brave\NeucoreApi\Model\EsiToken[]|null
     */
    public function getEsiTokens()
    {
        return $this->container['esi_tokens'];
    }

    /**
     * Sets esi_tokens
     *
     * @param \Brave\NeucoreApi\Model\EsiToken[]|null $esi_tokens ESI tokens of the character (API: not included by default).
     *
     * @return self
     */
    public function setEsiTokens($esi_tokens)
    {
        if (is_null($esi_tokens)) {
            throw new \InvalidArgumentException('non-nullable esi_tokens cannot be null');
        }
        $this->container['esi_tokens'] = $esi_tokens;

        return $this;
    }

    /**
     * Gets created
     *
     * @return \DateTime|null
     */
    public function getCreated()
    {
        return $this->container['created'];
    }

    /**
     * Sets created
     *
     * @param \DateTime|null $created created
     *
     * @return self
     */
    public function setCreated($created)
    {
        if (is_null($created)) {
            array_push($this->openAPINullablesSetToNull, 'created');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('created', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['created'] = $created;

        return $this;
    }

    /**
     * Gets last_update
     *
     * @return \DateTime|null
     */
    public function getLastUpdate()
    {
        return $this->container['last_update'];
    }

    /**
     * Sets last_update
     *
     * @param \DateTime|null $last_update Last ESI update.
     *
     * @return self
     */
    public function setLastUpdate($last_update)
    {
        if (is_null($last_update)) {
            array_push($this->openAPINullablesSetToNull, 'last_update');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('last_update', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['last_update'] = $last_update;

        return $this;
    }

    /**
     * Gets corporation
     *
     * @return \Brave\NeucoreApi\Model\Corporation|null
     */
    public function getCorporation()
    {
        return $this->container['corporation'];
    }

    /**
     * Sets corporation
     *
     * @param \Brave\NeucoreApi\Model\Corporation|null $corporation corporation
     *
     * @return self
     */
    public function setCorporation($corporation)
    {
        if (is_null($corporation)) {
            throw new \InvalidArgumentException('non-nullable corporation cannot be null');
        }
        $this->container['corporation'] = $corporation;

        return $this;
    }

    /**
     * Gets character_name_changes
     *
     * @return \Brave\NeucoreApi\Model\CharacterNameChange[]|null
     */
    public function getCharacterNameChanges()
    {
        return $this->container['character_name_changes'];
    }

    /**
     * Sets character_name_changes
     *
     * @param \Brave\NeucoreApi\Model\CharacterNameChange[]|null $character_name_changes List of previous character names (API: not included by default).
     *
     * @return self
     */
    public function setCharacterNameChanges($character_name_changes)
    {
        if (is_null($character_name_changes)) {
            throw new \InvalidArgumentException('non-nullable character_name_changes cannot be null');
        }
        $this->container['character_name_changes'] = $character_name_changes;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


