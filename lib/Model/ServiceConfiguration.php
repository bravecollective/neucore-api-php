<?php
/**
 * ServiceConfiguration
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Brave\NeucoreApi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Neucore API
 *
 * Client library of Neucore API
 *
 * The version of the OpenAPI document: 1.33.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.0.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Brave\NeucoreApi\Model;

use \ArrayAccess;
use \Brave\NeucoreApi\ObjectSerializer;

/**
 * ServiceConfiguration Class Doc Comment
 *
 * @category Class
 * @package  Brave\NeucoreApi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class ServiceConfiguration implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'ServiceConfiguration';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'php_class' => 'string',
        'psr4_prefix' => 'string',
        'psr4_path' => 'string',
        'one_account' => 'bool',
        'required_groups' => 'int[]',
        'properties' => 'string[]',
        'show_password' => 'bool',
        'actions' => 'string[]',
        'urls' => '\Brave\NeucoreApi\Model\ServiceConfigurationURL[]',
        'text_account' => 'string',
        'text_top' => 'string',
        'text_register' => 'string',
        'text_pending' => 'string',
        'configuration_data' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'php_class' => null,
        'psr4_prefix' => null,
        'psr4_path' => null,
        'one_account' => null,
        'required_groups' => null,
        'properties' => null,
        'show_password' => null,
        'actions' => null,
        'urls' => null,
        'text_account' => null,
        'text_top' => null,
        'text_register' => null,
        'text_pending' => null,
        'configuration_data' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'php_class' => 'phpClass',
        'psr4_prefix' => 'psr4Prefix',
        'psr4_path' => 'psr4Path',
        'one_account' => 'oneAccount',
        'required_groups' => 'requiredGroups',
        'properties' => 'properties',
        'show_password' => 'showPassword',
        'actions' => 'actions',
        'urls' => 'URLs',
        'text_account' => 'textAccount',
        'text_top' => 'textTop',
        'text_register' => 'textRegister',
        'text_pending' => 'textPending',
        'configuration_data' => 'configurationData'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'php_class' => 'setPhpClass',
        'psr4_prefix' => 'setPsr4Prefix',
        'psr4_path' => 'setPsr4Path',
        'one_account' => 'setOneAccount',
        'required_groups' => 'setRequiredGroups',
        'properties' => 'setProperties',
        'show_password' => 'setShowPassword',
        'actions' => 'setActions',
        'urls' => 'setUrls',
        'text_account' => 'setTextAccount',
        'text_top' => 'setTextTop',
        'text_register' => 'setTextRegister',
        'text_pending' => 'setTextPending',
        'configuration_data' => 'setConfigurationData'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'php_class' => 'getPhpClass',
        'psr4_prefix' => 'getPsr4Prefix',
        'psr4_path' => 'getPsr4Path',
        'one_account' => 'getOneAccount',
        'required_groups' => 'getRequiredGroups',
        'properties' => 'getProperties',
        'show_password' => 'getShowPassword',
        'actions' => 'getActions',
        'urls' => 'getUrls',
        'text_account' => 'getTextAccount',
        'text_top' => 'getTextTop',
        'text_register' => 'getTextRegister',
        'text_pending' => 'getTextPending',
        'configuration_data' => 'getConfigurationData'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getPropertiesAllowableValues()
    {
        return [
            
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getActionsAllowableValues()
    {
        return [
            
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['php_class'] = $data['php_class'] ?? null;
        $this->container['psr4_prefix'] = $data['psr4_prefix'] ?? null;
        $this->container['psr4_path'] = $data['psr4_path'] ?? null;
        $this->container['one_account'] = $data['one_account'] ?? null;
        $this->container['required_groups'] = $data['required_groups'] ?? null;
        $this->container['properties'] = $data['properties'] ?? null;
        $this->container['show_password'] = $data['show_password'] ?? null;
        $this->container['actions'] = $data['actions'] ?? null;
        $this->container['urls'] = $data['urls'] ?? null;
        $this->container['text_account'] = $data['text_account'] ?? null;
        $this->container['text_top'] = $data['text_top'] ?? null;
        $this->container['text_register'] = $data['text_register'] ?? null;
        $this->container['text_pending'] = $data['text_pending'] ?? null;
        $this->container['configuration_data'] = $data['configuration_data'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['properties'] === null) {
            $invalidProperties[] = "'properties' can't be null";
        }
        if ($this->container['actions'] === null) {
            $invalidProperties[] = "'actions' can't be null";
        }
        if ($this->container['urls'] === null) {
            $invalidProperties[] = "'urls' can't be null";
        }
        if ($this->container['text_account'] === null) {
            $invalidProperties[] = "'text_account' can't be null";
        }
        if ($this->container['text_top'] === null) {
            $invalidProperties[] = "'text_top' can't be null";
        }
        if ($this->container['text_register'] === null) {
            $invalidProperties[] = "'text_register' can't be null";
        }
        if ($this->container['text_pending'] === null) {
            $invalidProperties[] = "'text_pending' can't be null";
        }
        if ($this->container['configuration_data'] === null) {
            $invalidProperties[] = "'configuration_data' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets php_class
     *
     * @return string|null
     */
    public function getPhpClass()
    {
        return $this->container['php_class'];
    }

    /**
     * Sets php_class
     *
     * @param string|null $php_class php_class
     *
     * @return self
     */
    public function setPhpClass($php_class)
    {
        $this->container['php_class'] = $php_class;

        return $this;
    }

    /**
     * Gets psr4_prefix
     *
     * @return string|null
     */
    public function getPsr4Prefix()
    {
        return $this->container['psr4_prefix'];
    }

    /**
     * Sets psr4_prefix
     *
     * @param string|null $psr4_prefix psr4_prefix
     *
     * @return self
     */
    public function setPsr4Prefix($psr4_prefix)
    {
        $this->container['psr4_prefix'] = $psr4_prefix;

        return $this;
    }

    /**
     * Gets psr4_path
     *
     * @return string|null
     */
    public function getPsr4Path()
    {
        return $this->container['psr4_path'];
    }

    /**
     * Sets psr4_path
     *
     * @param string|null $psr4_path psr4_path
     *
     * @return self
     */
    public function setPsr4Path($psr4_path)
    {
        $this->container['psr4_path'] = $psr4_path;

        return $this;
    }

    /**
     * Gets one_account
     *
     * @return bool|null
     */
    public function getOneAccount()
    {
        return $this->container['one_account'];
    }

    /**
     * Sets one_account
     *
     * @param bool|null $one_account one_account
     *
     * @return self
     */
    public function setOneAccount($one_account)
    {
        $this->container['one_account'] = $one_account;

        return $this;
    }

    /**
     * Gets required_groups
     *
     * @return int[]|null
     */
    public function getRequiredGroups()
    {
        return $this->container['required_groups'];
    }

    /**
     * Sets required_groups
     *
     * @param int[]|null $required_groups required_groups
     *
     * @return self
     */
    public function setRequiredGroups($required_groups)
    {
        $this->container['required_groups'] = $required_groups;

        return $this;
    }

    /**
     * Gets properties
     *
     * @return string[]
     */
    public function getProperties()
    {
        return $this->container['properties'];
    }

    /**
     * Sets properties
     *
     * @param string[] $properties properties
     *
     * @return self
     */
    public function setProperties($properties)
    {
        $allowedValues = $this->getPropertiesAllowableValues();
        if (array_diff($properties, $allowedValues)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'properties', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['properties'] = $properties;

        return $this;
    }

    /**
     * Gets show_password
     *
     * @return bool|null
     */
    public function getShowPassword()
    {
        return $this->container['show_password'];
    }

    /**
     * Sets show_password
     *
     * @param bool|null $show_password show_password
     *
     * @return self
     */
    public function setShowPassword($show_password)
    {
        $this->container['show_password'] = $show_password;

        return $this;
    }

    /**
     * Gets actions
     *
     * @return string[]
     */
    public function getActions()
    {
        return $this->container['actions'];
    }

    /**
     * Sets actions
     *
     * @param string[] $actions actions
     *
     * @return self
     */
    public function setActions($actions)
    {
        $allowedValues = $this->getActionsAllowableValues();
        if (array_diff($actions, $allowedValues)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'actions', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['actions'] = $actions;

        return $this;
    }

    /**
     * Gets urls
     *
     * @return \Brave\NeucoreApi\Model\ServiceConfigurationURL[]
     */
    public function getUrls()
    {
        return $this->container['urls'];
    }

    /**
     * Sets urls
     *
     * @param \Brave\NeucoreApi\Model\ServiceConfigurationURL[] $urls urls
     *
     * @return self
     */
    public function setUrls($urls)
    {
        $this->container['urls'] = $urls;

        return $this;
    }

    /**
     * Gets text_account
     *
     * @return string
     */
    public function getTextAccount()
    {
        return $this->container['text_account'];
    }

    /**
     * Sets text_account
     *
     * @param string $text_account text_account
     *
     * @return self
     */
    public function setTextAccount($text_account)
    {
        $this->container['text_account'] = $text_account;

        return $this;
    }

    /**
     * Gets text_top
     *
     * @return string
     */
    public function getTextTop()
    {
        return $this->container['text_top'];
    }

    /**
     * Sets text_top
     *
     * @param string $text_top text_top
     *
     * @return self
     */
    public function setTextTop($text_top)
    {
        $this->container['text_top'] = $text_top;

        return $this;
    }

    /**
     * Gets text_register
     *
     * @return string
     */
    public function getTextRegister()
    {
        return $this->container['text_register'];
    }

    /**
     * Sets text_register
     *
     * @param string $text_register text_register
     *
     * @return self
     */
    public function setTextRegister($text_register)
    {
        $this->container['text_register'] = $text_register;

        return $this;
    }

    /**
     * Gets text_pending
     *
     * @return string
     */
    public function getTextPending()
    {
        return $this->container['text_pending'];
    }

    /**
     * Sets text_pending
     *
     * @param string $text_pending text_pending
     *
     * @return self
     */
    public function setTextPending($text_pending)
    {
        $this->container['text_pending'] = $text_pending;

        return $this;
    }

    /**
     * Gets configuration_data
     *
     * @return string
     */
    public function getConfigurationData()
    {
        return $this->container['configuration_data'];
    }

    /**
     * Sets configuration_data
     *
     * @param string $configuration_data configuration_data
     *
     * @return self
     */
    public function setConfigurationData($configuration_data)
    {
        $this->container['configuration_data'] = $configuration_data;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


