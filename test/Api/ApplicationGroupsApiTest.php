<?php
/**
 * ApplicationGroupsApiTest
 * PHP version 7.3
 *
 * @category Class
 * @package  Brave\NeucoreApi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Neucore API
 *
 * Client library of Neucore API
 *
 * The version of the OpenAPI document: 1.31.1
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.4.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Please update the test case below to test the endpoint.
 */

namespace Brave\NeucoreApi\Test\Api;

use \Brave\NeucoreApi\Configuration;
use \Brave\NeucoreApi\ApiException;
use \Brave\NeucoreApi\ObjectSerializer;
use PHPUnit\Framework\TestCase;

/**
 * ApplicationGroupsApiTest Class Doc Comment
 *
 * @category Class
 * @package  Brave\NeucoreApi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class ApplicationGroupsApiTest extends TestCase
{

    /**
     * Setup before running any test cases
     */
    public static function setUpBeforeClass(): void
    {
    }

    /**
     * Setup before running each test case
     */
    public function setUp(): void
    {
    }

    /**
     * Clean up after running each test case
     */
    public function tearDown(): void
    {
    }

    /**
     * Clean up after running all test cases
     */
    public static function tearDownAfterClass(): void
    {
    }

    /**
     * Test case for allianceGroupsBulkV1
     *
     * Return groups of multiple alliances..
     *
     */
    public function testAllianceGroupsBulkV1()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for allianceGroupsV1
     *
     * Return groups of the alliance..
     *
     */
    public function testAllianceGroupsV1()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for allianceGroupsV2
     *
     * Return groups of the alliance..
     *
     */
    public function testAllianceGroupsV2()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for corpGroupsBulkV1
     *
     * Return groups of multiple corporations..
     *
     */
    public function testCorpGroupsBulkV1()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for corpGroupsV1
     *
     * Return groups of the corporation..
     *
     */
    public function testCorpGroupsV1()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for corpGroupsV2
     *
     * Return groups of the corporation..
     *
     */
    public function testCorpGroupsV2()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for groupMembersV1
     *
     * Returns the main character IDs from all group members..
     *
     */
    public function testGroupMembersV1()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for groupsBulkV1
     *
     * Return groups of multiple players, identified by one of their character IDs..
     *
     */
    public function testGroupsBulkV1()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for groupsV1
     *
     * Return groups of the character's player account..
     *
     */
    public function testGroupsV1()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for groupsV2
     *
     * Return groups of the character's player account..
     *
     */
    public function testGroupsV2()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for groupsWithFallbackV1
     *
     * Returns groups from the character's account, if available, or the corporation and alliance..
     *
     */
    public function testGroupsWithFallbackV1()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }
}
